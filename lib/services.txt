--- Content of navigation_service.dart ---
// lib/services/navigation_service.dart
import 'package:flutter/material.dart';

class NavigationService {
  final GlobalKey<NavigatorState> navigatorKey = GlobalKey<NavigatorState>();

  Future<dynamic> navigateTo(String routeName, {Object? arguments}) {
    return navigatorKey.currentState!.pushNamed(
      routeName,
      arguments: arguments,
    );
  }

  Future<dynamic> replaceTo(String routeName, {Object? arguments}) {
    return navigatorKey.currentState!.pushReplacementNamed(
      routeName,
      arguments: arguments,
    );
  }

  void goBack([dynamic result]) {
    return navigatorKey.currentState!.pop(result);
  }
}



--- Content of analytics_service.dart ---
// lib/services/analytics_service.dart
import 'package:flutter/foundation.dart';
import 'dart:convert';

class AnalyticsService {
  static final AnalyticsService _instance = AnalyticsService._internal();
  final List<Map<String, dynamic>> _events = [];
  Map<String, dynamic>? _userProperties;
  bool _isInitialized = false;

  factory AnalyticsService() {
    return _instance;
  }

  AnalyticsService._internal();

  Future<void> initialize() async {
    if (_isInitialized) return;
    
    try {
      _isInitialized = true;
      debugPrint('AnalyticsService initialized');
    } catch (e) {
      debugPrint('Failed to initialize AnalyticsService: $e');
    }
  }

  Future<void> logEvent({
    required String name,
    Map<String, dynamic>? parameters,
  }) async {
    if (!_isInitialized) {
      debugPrint('AnalyticsService not initialized');
      return;
    }

    try {
      final eventData = {
        'name': name,
        'parameters': parameters,
        'timestamp': DateTime.now().toIso8601String(),
      };
      _events.add(eventData);

      // Debug logging
      debugPrint('Analytics Event: $name');
      if (parameters != null) {
        debugPrint('Parameters: ${jsonEncode(parameters)}');
      }
    } catch (e) {
      debugPrint('Failed to log event: $e');
    }
  }

  Future<void> setUserProperties({
    required String userId,
    required Map<String, dynamic> properties,
  }) async {
    if (!_isInitialized) {
      debugPrint('AnalyticsService not initialized');
      return;
    }

    try {
      _userProperties = {
        'userId': userId,
        'properties': properties,
        'lastUpdated': DateTime.now().toIso8601String(),
      };

      // Debug logging
      debugPrint('Set User Properties for user: $userId');
      debugPrint('Properties: ${jsonEncode(properties)}');
    } catch (e) {
      debugPrint('Failed to set user properties: $e');
    }
  }

  Future<void> logScreenView({
    required String screenName,
    String? screenClass,
  }) async {
    await logEvent(
      name: 'screen_view',
      parameters: {
        'screen_name': screenName,
        if (screenClass != null) 'screen_class': screenClass,
      },
    );
  }

  Future<void> logUserAction({
    required String action,
    required String category,
    String? label,
    int? value,
  }) async {
    await logEvent(
      name: 'user_action',
      parameters: {
        'action': action,
        'category': category,
        if (label != null) 'label': label,
        if (value != null) 'value': value,
      },
    );
  }

  Future<void> logError({
    required String error,
    StackTrace? stackTrace,
    String? fatal,
  }) async {
    await logEvent(
      name: 'error',
      parameters: {
        'description': error,
        if (stackTrace != null) 'stack_trace': stackTrace.toString(),
        if (fatal != null) 'fatal': fatal,
      },
    );
  }

  List<Map<String, dynamic>> getStoredEvents() {
    return List<Map<String, dynamic>>.from(_events);
  }

  void clearStoredEvents() {
    _events.clear();
  }

  Map<String, dynamic>? getUserProperties() {
    return _userProperties != null 
        ? Map<String, dynamic>.from(_userProperties!)
        : null;
  }

  // Predefined events
  Future<void> logAppOpen() async {
    await logEvent(name: 'app_open');
  }

  Future<void> logLogin({required String method}) async {
    await logEvent(
      name: 'login',
      parameters: {'method': method},
    );
  }

  Future<void> logSignUp({required String method}) async {
    await logEvent(
      name: 'sign_up',
      parameters: {'method': method},
    );
  }

  Future<void> logEcoAction({
    required String actionId,
    required String actionName,
    required int points,
    Map<String, dynamic>? additionalParams,
  }) async {
    await logEvent(
      name: 'eco_action_completed',
      parameters: {
        'action_id': actionId,
        'action_name': actionName,
        'points': points,
        if (additionalParams != null) ...additionalParams,
      },
    );
  }

  Future<void> logRewardRedeemed({
    required String rewardId,
    required String rewardName,
    required int pointsSpent,
  }) async {
    await logEvent(
      name: 'reward_redeemed',
      parameters: {
        'reward_id': rewardId,
        'reward_name': rewardName,
        'points_spent': pointsSpent,
      },
    );
  }

  Future<void> logAchievementUnlocked({
    required String achievementId,
    required String achievementName,
  }) async {
    await logEvent(
      name: 'achievement_unlocked',
      parameters: {
        'achievement_id': achievementId,
        'achievement_name': achievementName,
      },
    );
  }

  // Analytics reporting methods
  String generateAnalyticsReport() {
    if (_events.isEmpty) {
      return 'No events recorded';
    }

    final buffer = StringBuffer();
    buffer.writeln('Analytics Report');
    buffer.writeln('================');
    buffer.writeln('Total Events: ${_events.length}');
    buffer.writeln();

    // Group events by name
    final eventGroups = <String, List<Map<String, dynamic>>>{};
    for (var event in _events) {
      final name = event['name'] as String;
      eventGroups.putIfAbsent(name, () => []).add(event);
    }

    // Report for each event type
    eventGroups.forEach((eventName, events) {
      buffer.writeln('Event: $eventName');
      buffer.writeln('Occurrences: ${events.length}');
      buffer.writeln('Last occurrence: ${events.last['timestamp']}');
      buffer.writeln('----------------------------------------');
    });

    return buffer.toString();
  }

  // Debug methods
  void printCurrentState() {
    debugPrint('\nAnalytics Service State');
    debugPrint('=======================');
    debugPrint('Initialized: $_isInitialized');
    debugPrint('Total Events: ${_events.length}');
    debugPrint('User Properties: ${_userProperties != null ? jsonEncode(_userProperties) : 'None'}');
    debugPrint('=======================\n');
  }
}

// Example usage:
/*
void main() async {
  final analytics = AnalyticsService();
  await analytics.initialize();
  
  await analytics.logEcoAction(
    actionId: 'plant_tree_1',
    actionName: 'Plant a Tree',
    points: 100,
  );
  
  await analytics.logScreenView(
    screenName: 'Home Screen',
  );
  
  await analytics.setUserProperties(
    userId: 'user123',
    properties: {
      'level': 5,
      'points': 1500,
      'achievements': 10,
    },
  );
  
  analytics.printCurrentState();
  print(analytics.generateAnalyticsReport());
}
*/

--- Content of database_service.dart ---
// lib/services/database_service.dart
import 'package:supabase_flutter/supabase_flutter.dart';
import '../models/post.dart';
import 'package:logging/logging.dart';

class DatabaseService {
  final _supabase = Supabase.instance.client;
  final _logger = Logger('DatabaseService');

  // User Profile Methods
  Future<void> createUserProfile({
    required String userId,
    required String name,
    required String email,
    String? avatarUrl,
  }) async {
    try {
      await _supabase.from('profiles').insert({
        'id': userId,
        'name': name,
        'email': email,
        'avatar_url': avatarUrl,
        'points': 0,
      });
    } catch (e) {
      _logger.severe('Failed to create user profile: $e');
      throw Exception('Failed to create user profile');
    }
  }

  Future<void> updateUserProfile({
    required String userId,
    String? name,
    String? avatarUrl,
    String? bio,
  }) async {
    try {
      final updates = <String, dynamic>{};
      if (name != null) updates['name'] = name;
      if (avatarUrl != null) updates['avatar_url'] = avatarUrl;
      if (bio != null) updates['bio'] = bio;

      await _supabase
          .from('profiles')
          .update(updates)
          .eq('id', userId);
    } catch (e) {
      _logger.severe('Failed to update user profile: $e');
      throw Exception('Failed to update user profile');
    }
  }

  Future<Map<String, dynamic>?> getUserProfile(String userId) async {
    try {
      final response = await _supabase
          .from('profiles')
          .select()
          .eq('id', userId)
          .single();
      return response;
    } catch (e) {
      _logger.severe('Failed to get user profile: $e');
      throw Exception('Failed to get user profile');
    }
  }

  // Eco Actions Methods
  Future<void> saveEcoAction({
    required String userId,
    required String actionType,
    required int points,
    required String imageUrl,
    required String description,
    double? latitude,
    double? longitude,
    bool shouldPost = false,
  }) async {
    try {
      final actionResponse = await _supabase.from('eco_actions').insert({
        'user_id': userId,
        'action_type': actionType,
        'points': points,
        'image_url': imageUrl,
        'description': description,
        'latitude': latitude,
        'longitude': longitude,
      }).select('id').single();

      // Update user points
      await _supabase.rpc('update_user_points', params: {
        'user_id': userId,
        'points_to_add': points,
      });

      // Create social post if requested
      if (shouldPost) {
        await createPost(
          userId: userId,
          imageUrl: imageUrl,
          description: description,
          actionType: actionType,
          points: points,
          ecoActionId: actionResponse['id'],
        );
      }
    } catch (e) {
      _logger.severe('Failed to save eco action: $e');
      throw Exception('Failed to save eco action');
    }
  }

  Future<List<Map<String, dynamic>>> getUserEcoActions(String userId) async {
    try {
      final response = await _supabase
          .from('eco_actions')
          .select()
          .eq('user_id', userId)
          .order('created_at', ascending: false);
      return List<Map<String, dynamic>>.from(response);
    } catch (e) {
      _logger.severe('Failed to get eco actions: $e');
      throw Exception('Failed to get eco actions');
    }
  }

  // Social Posts Methods
  Future<void> createPost({
    required String userId,
    required String imageUrl,
    required String description,
    required String actionType,
    required int points,
    String? ecoActionId,
  }) async {
    try {
      await _supabase.from('posts').insert({
        'user_id': userId,
        'image_url': imageUrl,
        'description': description,
        'action_type': actionType,
        'points': points,
        'eco_action_id': ecoActionId,
        'likes': 0,
        'comments': 0,
      });
    } catch (e) {
      _logger.severe('Failed to create post: $e');
      throw Exception('Failed to create post');
    }
  }

  Future<List<Post>> getPosts({
    int limit = 10,
    int offset = 0,
    String? userId,
  }) async {
    try {
      var query = _supabase
          .from('posts')
          .select('''
            *,
            profiles!inner (
              name,
              avatar_url
            ),
            likes (
              user_id
            )
          ''');

      // Apply filters
      if (userId != null) {
        query = query.contains('user_id', userId);
      }

      // Apply ordering and pagination
      final response = await query
          .order('created_at', ascending: false)
          .range(offset, offset + limit - 1);

      return response.map((post) {
        final likes = post['likes'] as List;
        final isLiked = likes.any((like) => 
          like['user_id'] == _supabase.auth.currentUser?.id);
        return Post.fromJson({...post, 'is_liked': isLiked});
      }).toList();
    } catch (e) {
      _logger.severe('Failed to get posts: $e');
      throw Exception('Failed to get posts');
    }
  }

  Future<void> likePost(String postId) async {
    try {
      final userId = _supabase.auth.currentUser?.id;
      if (userId == null) throw Exception('User not authenticated');

      // Check if already liked
      final existing = await _supabase
          .from('likes')
          .select()
          .eq('post_id', postId)
          .eq('user_id', userId)
          .maybeSingle();

      if (existing == null) {
        // Like the post
        await _supabase.from('likes').insert({
          'post_id': postId,
          'user_id': userId,
        });

        // Increment likes count
        await _supabase.rpc('increment_post_likes', params: {
          'post_id': postId,
        });
      } else {
        // Unlike the post
        await _supabase
            .from('likes')
            .delete()
            .eq('post_id', postId)
            .eq('user_id', userId);

        // Decrement likes count
        await _supabase.rpc('decrement_post_likes', params: {
          'post_id': postId,
        });
      }
    } catch (e) {
      _logger.severe('Failed to like/unlike post: $e');
      throw Exception('Failed to like/unlike post');
    }
  }

  // Comments Methods
  Future<void> addComment({
    required String postId,
    required String comment,
  }) async {
    try {
      final userId = _supabase.auth.currentUser?.id;
      if (userId == null) throw Exception('User not authenticated');

      await _supabase.from('comments').insert({
        'post_id': postId,
        'user_id': userId,
        'comment': comment,
      });

      // Increment comments count
      await _supabase.rpc('increment_post_comments', params: {
        'post_id': postId,
      });
    } catch (e) {
      _logger.severe('Failed to add comment: $e');
      throw Exception('Failed to add comment');
    }
  }

  Future<List<Map<String, dynamic>>> getComments(String postId) async {
    try {
      final response = await _supabase
          .from('comments')
          .select('''
            *,
            profiles!inner (
              name,
              avatar_url
            )
          ''')
          .eq('post_id', postId)
          .order('created_at', ascending: true);

      return List<Map<String, dynamic>>.from(response);
    } catch (e) {
      _logger.severe('Failed to get comments: $e');
      throw Exception('Failed to get comments');
    }
  }

  // Achievement Methods
  Future<void> checkAndAwardAchievements(String userId) async {
    try {
      await _supabase.rpc('check_achievements', params: {
        'user_id': userId,
      });
    } catch (e) {
      _logger.severe('Failed to check achievements: $e');
      throw Exception('Failed to check achievements');
    }
  }

  // Statistics Methods
  Future<Map<String, dynamic>> getUserStats(String userId) async {
    try {
      final response = await _supabase.rpc('get_user_stats', params: {
        'user_id': userId,
      });
      return Map<String, dynamic>.from(response);
    } catch (e) {
      _logger.severe('Failed to get user stats: $e');
      throw Exception('Failed to get user stats');
    }
  }

  // Real-time subscriptions
  Stream<List<Map<String, dynamic>>> subscribeToNewPosts() {
    return _supabase
        .from('posts')
        .stream(primaryKey: ['id'])
        .order('created_at')
        .map((list) => List<Map<String, dynamic>>.from(list));
  }

  Stream<List<Map<String, dynamic>>> subscribeToComments(String postId) {
    return _supabase
        .from('comments')
        .stream(primaryKey: ['id'])
        .eq('post_id', postId)
        .order('created_at')
        .map((list) => List<Map<String, dynamic>>.from(list));
  }
}

--- Content of auth_service.dart ---
// lib/services/auth_service.dart
import 'package:flutter/foundation.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

class AuthService extends ChangeNotifier {
  final _supabase = Supabase.instance.client;
  User? get currentUser => _supabase.auth.currentUser;
  
  Future<void> signUp({
    required String email,
    required String password,
    required String name,
  }) async {
    try {
      final response = await _supabase.auth.signUp(
        email: email,
        password: password,
        data: {'name': name},
      );
      
      if (response.user != null) {
        // Create user profile in the database
        await _supabase.from('profiles').insert({
          'id': response.user!.id,
          'name': name,
          'email': email,
          'points': 0,
        });
      }
      
      notifyListeners();
    } catch (e) {
      throw Exception('Failed to sign up: $e');
    }
  }

  Future<void> signIn({
    required String email,
    required String password,
  }) async {
    try {
      await _supabase.auth.signInWithPassword(
        email: email,
        password: password,
      );
      notifyListeners();
    } catch (e) {
      throw Exception('Failed to sign in: $e');
    }
  }

  Future<void> signOut() async {
    try {
      await _supabase.auth.signOut();
      notifyListeners();
    } catch (e) {
      throw Exception('Failed to sign out: $e');
    }
  }
}

--- Content of notification_service.dart ---
// lib/services/notification_service.dart
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/timezone.dart' as tz;

class NotificationService {
  final FlutterLocalNotificationsPlugin _notifications = 
      FlutterLocalNotificationsPlugin();

  Future<void> initialize() async {
    const androidSettings = AndroidInitializationSettings('@mipmap/ic_launcher');
    const iosSettings = DarwinInitializationSettings();
    
    const initSettings = InitializationSettings(
      android: androidSettings,
      iOS: iosSettings,
    );

    await _notifications.initialize(initSettings);
  }

  Future<void> showNotification({
    required int id,
    required String title,
    required String body,
    String? payload,
  }) async {
    const androidDetails = AndroidNotificationDetails(
      'default_channel',
      'Default Channel',
      importance: Importance.high,
      priority: Priority.high,
    );

    const iosDetails = DarwinNotificationDetails();

    const details = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );

    await _notifications.show(id, title, body, details, payload: payload);
  }

  Future<void> scheduleNotification({
    required int id,
    required String title,
    required String body,
    required DateTime scheduledDate,
    String? payload,
  }) async {
    const androidDetails = AndroidNotificationDetails(
      'scheduled_channel',
      'Scheduled Channel',
      importance: Importance.high,
      priority: Priority.high,
    );

    const iosDetails = DarwinNotificationDetails();

    const details = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );

    await _notifications.zonedSchedule(
      id,
      title,
      body,
      tz.TZDateTime.from(scheduledDate, tz.local),
      details,
      androidAllowWhileIdle: true,
      uiLocalNotificationDateInterpretation:
          UILocalNotificationDateInterpretation.absoluteTime,
      payload: payload,
    );
  }

  Future<void> cancelNotification(int id) async {
    await _notifications.cancel(id);
  }

  Future<void> cancelAllNotifications() async {
    await _notifications.cancelAll();
  }
}

--- Content of api_service.dart ---
// lib/services/api_service.dart
import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:http/http.dart' as http;

class ApiService {
  static const String _baseUrl = 'YOUR_API_BASE_URL';
  static const Duration _timeout = Duration(seconds: 30);
  
  final Map<String, String> _defaultHeaders = {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
  };

  // Singleton pattern
  static final ApiService _instance = ApiService._internal();
  
  factory ApiService() {
    return _instance;
  }

  ApiService._internal();

  void setAuthToken(String token) {
    _defaultHeaders['Authorization'] = 'Bearer $token';
  }

  void removeAuthToken() {
    _defaultHeaders.remove('Authorization');
  }

  Future<T?> get<T>(
    String path, {
    Map<String, dynamic>? queryParameters,
    Map<String, String>? headers,
  }) async {
    try {
      final uri = Uri.parse('$_baseUrl$path').replace(
        queryParameters: queryParameters?.map(
          (key, value) => MapEntry(key, value.toString()),
        ),
      );

      final response = await http
          .get(
            uri,
            headers: {..._defaultHeaders, ...?headers},
          )
          .timeout(_timeout);

      return _handleResponse<T>(response);
    } catch (e) {
      _handleError(e);
      rethrow;
    }
  }

  Future<T?> post<T>(
    String path, {
    dynamic data,
    Map<String, String>? headers,
  }) async {
    try {
      final uri = Uri.parse('$_baseUrl$path');
      final response = await http
          .post(
            uri,
            headers: {..._defaultHeaders, ...?headers},
            body: jsonEncode(data),
          )
          .timeout(_timeout);

      return _handleResponse<T>(response);
    } catch (e) {
      _handleError(e);
      rethrow;
    }
  }

  Future<T?> put<T>(
    String path, {
    dynamic data,
    Map<String, String>? headers,
  }) async {
    try {
      final uri = Uri.parse('$_baseUrl$path');
      final response = await http
          .put(
            uri,
            headers: {..._defaultHeaders, ...?headers},
            body: jsonEncode(data),
          )
          .timeout(_timeout);

      return _handleResponse<T>(response);
    } catch (e) {
      _handleError(e);
      rethrow;
    }
  }

  Future<T?> delete<T>(
    String path, {
    Map<String, String>? headers,
  }) async {
    try {
      final uri = Uri.parse('$_baseUrl$path');
      final response = await http
          .delete(
            uri,
            headers: {..._defaultHeaders, ...?headers},
          )
          .timeout(_timeout);

      return _handleResponse<T>(response);
    } catch (e) {
      _handleError(e);
      rethrow;
    }
  }

  T? _handleResponse<T>(http.Response response) {
    if (response.statusCode >= 200 && response.statusCode < 300) {
      if (response.body.isEmpty) return null;
      
      final data = jsonDecode(response.body);
      return data as T;
    } else {
      throw ApiException(
        statusCode: response.statusCode,
        message: _getErrorMessage(response),
      );
    }
  }

  String _getErrorMessage(http.Response response) {
    try {
      final data = jsonDecode(response.body);
      return data['message'] ?? 'Unknown error occurred';
    } catch (e) {
      return 'Error: ${response.statusCode}';
    }
  }

  void _handleError(dynamic error) {
    if (error is ApiException) {
      debugPrint('API Error: ${error.message}');
    } else if (error is http.ClientException) {
      debugPrint('Network Error: ${error.message}');
    } else {
      debugPrint('Unexpected Error: $error');
    }
  }

  // Convenience methods for specific API endpoints
  Future<Map<String, dynamic>?> getUserProfile(String userId) async {
    return await get<Map<String, dynamic>>('/users/$userId');
  }

  Future<List<Map<String, dynamic>>?> getEcoActions() async {
    return await get<List<Map<String, dynamic>>>('/eco-actions');
  }

  Future<Map<String, dynamic>?> completeEcoAction(
    String actionId,
    Map<String, dynamic> data,
  ) async {
    return await post<Map<String, dynamic>>(
      '/eco-actions/$actionId/complete',
      data: data,
    );
  }

  Future<List<Map<String, dynamic>>?> getRewards() async {
    return await get<List<Map<String, dynamic>>>('/rewards');
  }

  Future<Map<String, dynamic>?> redeemReward(
    String rewardId,
    Map<String, dynamic> data,
  ) async {
    return await post<Map<String, dynamic>>(
      '/rewards/$rewardId/redeem',
      data: data,
    );
  }

  Future<Map<String, dynamic>?> updateUserProfile(
    String userId,
    Map<String, dynamic> data,
  ) async {
    return await put<Map<String, dynamic>>(
      '/users/$userId',
      data: data,
    );
  }
}

class ApiException implements Exception {
  final int statusCode;
  final String message;

  ApiException({
    required this.statusCode,
    required this.message,
  });

  @override
  String toString() => 'ApiException: $statusCode - $message';
}

// Example usage:
/*
void main() async {
  final api = ApiService();
  
  // Set auth token after login
  api.setAuthToken('your-auth-token');
  
  try {
    // Get user profile
    final profile = await api.getUserProfile('123');
    print(profile);
    
    // Get eco actions
    final actions = await api.getEcoActions();
    print(actions);
    
    // Complete an eco action
    final result = await api.completeEcoAction(
      'action123',
      {'proof': 'image_url.jpg'},
    );
    print(result);
  } on ApiException catch (e) {
    print('API Error: ${e.message}');
  } catch (e) {
    print('Unexpected error: $e');
  }
}
*/

--- Content of theme_service.dart ---
// lib/services/theme_service.dart
import 'package:flutter/material.dart';

class ThemeService extends ChangeNotifier {
  static final ThemeService _instance = ThemeService._internal();
  bool _isLightTheme = true;

  factory ThemeService() {
    return _instance;
  }

  ThemeService._internal();

  ThemeMode get themeMode => _isLightTheme ? ThemeMode.light : ThemeMode.dark;
  bool get isLightTheme => _isLightTheme;

  void toggleTheme() {
    _isLightTheme = !_isLightTheme;
    notifyListeners();
  }

  ThemeData getLightTheme() {
    return ThemeData(
      useMaterial3: true,
      colorScheme: ColorScheme.fromSeed(
        seedColor: Colors.green,
        brightness: Brightness.light,
      ),
      appBarTheme: const AppBarTheme(
        centerTitle: true,
        elevation: 0,
      ),
      cardTheme: CardTheme(
        elevation: 2,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(16),
        ),
      ),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          elevation: 2,
          padding: const EdgeInsets.symmetric(
            horizontal: 24,
            vertical: 12,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
        ),
      ),
      inputDecorationTheme: InputDecorationTheme(
        filled: true,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide.none,
        ),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 12,
        ),
      ),
      snackBarTheme: SnackBarThemeData(
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12),
        ),
      ),
      chipTheme: ChipThemeData(
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(8),
        ),
      ),
      bottomNavigationBarTheme: const BottomNavigationBarThemeData(
        selectedItemColor: Colors.green,
        unselectedItemColor: Colors.grey,
      ),
      textTheme: const TextTheme(
        headlineLarge: TextStyle(
          fontWeight: FontWeight.bold,
        ),
        headlineMedium: TextStyle(
          fontWeight: FontWeight.bold,
        ),
        headlineSmall: TextStyle(
          fontWeight: FontWeight.bold,
        ),
        titleLarge: TextStyle(
          fontWeight: FontWeight.w600,
        ),
        titleMedium: TextStyle(
          fontWeight: FontWeight.w600,
        ),
        titleSmall: TextStyle(
          fontWeight: FontWeight.w600,
        ),
        bodyLarge: TextStyle(
          fontSize: 16,
        ),
        bodyMedium: TextStyle(
          fontSize: 14,
        ),
        bodySmall: TextStyle(
          fontSize: 12,
        ),
      ),
    );
  }

  ThemeData getDarkTheme() {
    return ThemeData(
      useMaterial3: true,
      colorScheme: ColorScheme.fromSeed(
        seedColor: Colors.green,
        brightness: Brightness.dark,
      ),
      appBarTheme: const AppBarTheme(
        centerTitle: true,
        elevation: 0,
      ),
      cardTheme: CardTheme(
        elevation: 2,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(16),
        ),
      ),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          elevation: 2,
          padding: const EdgeInsets.symmetric(
            horizontal: 24,
            vertical: 12,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
        ),
      ),
      inputDecorationTheme: InputDecorationTheme(
        filled: true,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide.none,
        ),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 12,
        ),
      ),
      snackBarTheme: SnackBarThemeData(
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12),
        ),
      ),
      chipTheme: ChipThemeData(
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(8),
        ),
      ),
      bottomNavigationBarTheme: BottomNavigationBarThemeData(
        selectedItemColor: Colors.green[300],
        unselectedItemColor: Colors.grey,
      ),
      textTheme: const TextTheme(
        headlineLarge: TextStyle(
          fontWeight: FontWeight.bold,
        ),
        headlineMedium: TextStyle(
          fontWeight: FontWeight.bold,
        ),
        headlineSmall: TextStyle(
          fontWeight: FontWeight.bold,
        ),
        titleLarge: TextStyle(
          fontWeight: FontWeight.w600,
        ),
        titleMedium: TextStyle(
          fontWeight: FontWeight.w600,
        ),
        titleSmall: TextStyle(
          fontWeight: FontWeight.w600,
        ),
        bodyLarge: TextStyle(
          fontSize: 16,
        ),
        bodyMedium: TextStyle(
          fontSize: 14,
        ),
        bodySmall: TextStyle(
          fontSize: 12,
        ),
      ),
    );
  }
}

// Example usage:
/*
void main() {
  runApp(
    ChangeNotifierProvider(
      create: (_) => ThemeService(),
      child: MyApp(),
    ),
  );
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    final themeService = Provider.of<ThemeService>(context);
    
    return MaterialApp(
      theme: themeService.getLightTheme(),
      darkTheme: themeService.getDarkTheme(),
      themeMode: themeService.themeMode,
      home: HomeScreen(),
    );
  }
}

// To toggle theme:
ElevatedButton(
  onPressed: () {
    Provider.of<ThemeService>(context, listen: false).toggleTheme();
  },
  child: Text('Toggle Theme'),
)
*/

--- Content of storage_service.dart ---
// lib/services/storage_service.dart
import 'dart:io';
import 'package:path/path.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

class StorageService {
  final _supabase = Supabase.instance.client;

  Future<String> uploadImage(File imageFile, String userId) async {
    try {
      final fileExt = extension(imageFile.path);
      final fileName = '${DateTime.now().millisecondsSinceEpoch}$fileExt';
      final filePath = 'eco-actions/$userId/$fileName';
      
      await _supabase.storage.from('images').upload(
        filePath,
        imageFile,
        fileOptions: const FileOptions(cacheControl: '3600', upsert: false),
      );
      
      return _supabase.storage.from('images').getPublicUrl(filePath);
    } catch (e) {
      throw Exception('Failed to upload image: $e');
    }
  }
}

